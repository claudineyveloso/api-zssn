// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createInfected = `-- name: CreateInfected :exec
INSERT INTO Infecteds ( user_id_reported, user_id_notified, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateInfectedParams struct {
	UserIDReported uuid.UUID
	UserIDNotified uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateInfected(ctx context.Context, arg CreateInfectedParams) error {
	_, err := q.db.ExecContext(ctx, createInfected,
		arg.UserIDReported,
		arg.UserIDNotified,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createInventory = `-- name: CreateInventory :exec
INSERT INTO inventories ( ID, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateInventoryParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) error {
	_, err := q.db.ExecContext(ctx, createInventory,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createItem = `-- name: CreateItem :exec
INSERT INTO items ( ID, description, score, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateItemParams struct {
	ID          uuid.UUID
	Description string
	Score       int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.ID,
		arg.Description,
		arg.Score,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users ( ID, name, age, gender, latitude, longitude, infected, contamination_notification, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateUserParams struct {
	ID                        uuid.UUID
	Name                      string
	Age                       int32
	Gender                    string
	Latitude                  string
	Longitude                 string
	Infected                  sql.NullBool
	ContaminationNotification sql.NullInt32
	CreatedAt                 time.Time
	UpdatedAt                 time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Latitude,
		arg.Longitude,
		arg.Infected,
		arg.ContaminationNotification,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, age, gender, latitude, longitude, infected, contamination_notification, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Gender,
		&i.Latitude,
		&i.Longitude,
		&i.Infected,
		&i.ContaminationNotification,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, age, gender, latitude, longitude, infected, contamination_notification, created_at, updated_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Gender,
			&i.Latitude,
			&i.Longitude,
			&i.Infected,
			&i.ContaminationNotification,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE users SET latitude = $2, longitude = $3 WHERE id = $1
`

type UpdateLocationParams struct {
	ID        uuid.UUID
	Latitude  string
	Longitude string
	UpdatedAt time.Time
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLocation, arg.ID, arg.Latitude, arg.Longitude, arg.UpdatedAt)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $2, age = $3, gender = $4, latitude = $5, longitude = $6 WHERE id = $1
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Name      string
	Age       int32
	Gender    string
	Latitude  string
	Longitude string
	UpdatedAt time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Gender,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}
